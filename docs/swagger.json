{
    "openapi": "3.0.0",
    "info": {
        "version": "1.0.0",
        "title": "Ecommerce JS",
        "description": "Ecommerce JS made NodeJS version 20, mongoose, mongodb",
        "contact": {
            "name": "Ecommerce with Swagger API",
            "email": "johnmontoya777@hotmail.com",
            "url": "https://github.com/Johnmontoya"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "servers": [
        {
            "url": "http://localhost:3000",
            "description": "Development Server"
        }
    ],
    "paths": {
        "/api/v1/categories": {
            "get": {
                "summary": "Get all categories",
                "description": "Return all categories from the database",
                "responses": {
                    "200": {
                        "description": "A list of categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Category"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error internal server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a category",
                "description": "Create a category and save in the database",
                "operationId": "addCategory",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewCategory"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Name, icon, and color are required fields"
                    },
                    "500": {
                        "description": "Error internal server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/categories/{id}": {
            "get": {
                "summary": "Get one category by ID",
                "description": "Return a category on a single ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category to fetch",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieve one category",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    },
                    "500": {
                        "description": "Error internal server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update a category by ID",
                "description": "Update one category from JSON",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category to fetch",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewCategory"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Category"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Name, icon, and color are required fields"
                    },
                    "404": {
                        "description": "Category not found or cannot be updated"
                    },
                    "500": {
                        "description": "Error internal server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete one category by ID",
                "description": "Delete a category of the database",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of category to fetch",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the category has been deleted"
                    },
                    "404": {
                        "description": "category not found"
                    },
                    "500": {
                        "description": "Error internal server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/products": {
            "get": {
                "summary": "Get all products",
                "description": "Return all products from the database",
                "parameters": [
                    {
                        "name": "categories",
                        "in": "query",
                        "description": "categories to filter by",
                        "required": false,
                        "style": "form",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },{
                        "name": "limit",
                        "in": "query",
                        "description": "maximum number of results to return",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Product"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not products found"
                    },
                    "500": {
                        "description": "Error internal server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/orders": {
            "get": {
                "summary": "Get all orders registers",
                "description": "Return all orders from the database",
                "responses": {
                    "200": {
                        "description": "A list of orders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Order"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Orders not found"
                    },
                    "500": {
                        "description": "Error internal server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "summary": "Get all users",
                "description": "Return all users from the database",
                "responses": {
                    "200": {
                        "description": "A list of users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Users not found"
                    },
                    "500": {
                        "description": "Error internal server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "summary": "Get one user by ID",
                "description": "Return a user on a single ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of user to fetch",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieve one user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "The user with the given ID was not found"
                    },
                    "500": {
                        "description": "Error internal server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Category": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/NewCategory"
                    },
                    {
                        "type": "object",
                        "required": [
                            "id"
                        ]
                    }
                ]
            },
            "Product" : {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/NewProduct"
                    }
                ]
            },
            "Order": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/NewOrder"
                    },
                    {
                        "type": "object",
                        "required": [
                            "id"
                        ]
                    }
                ]
            },
            "User": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/NewUser"
                    },
                    {
                        "type": "object",
                        "required": [
                            "id"
                        ]
                    }
                ]
            },
            "NewCategory": {
                "type": "object",
                "properties": {                               
                    "name": {
                        "type": "string",
                        "description": "The categories's name",
                        "example": "mobile"
                    },
                    "icon": {
                        "type": "string",
                        "description": "The categories's icon",
                        "example": "mobile" 
                    },
                    "color": {
                        "type": "string",
                        "description": "The categories's color",
                        "example": "#F0E4E1" 
                    }
                }
            },
            "NewProduct": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the product",
                        "example": "Patriot Viper Steel RGB DDR4 RAM 8GB"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the product",
                        "example": "Módulo DDR4 de 8 GB (1 x 8 GB) 3200 MHz" 
                    },
                    "richDescription": {
                        "type": "string",
                        "description": "Description with more details",
                        "example": "Probado en las últimas plataformas Intel y AMD para un rendimiento fiable y rápido" 
                    },
                    "image": {
                        "type": "string",
                        "description": "A main image of the product",
                        "example": "https://m.media-amazon.com/images/I/91ZRYZkh4CL._AC_SX466_.jpg"
                    },
                    "images": [
                        {
                        "type": "string",
                        "description": "Array of images of the product",
                        "example": "https://m.media-amazon.com/images/I/91ZRYZkh4CL._AC_SX466_.jpg"
                        }
                    ],
                    "brand": {
                        "type": "string",
                        "description": "The brand of the product",
                        "example": "Patriot Memory"
                    },
                    "price": {
                        "type": "integer",
                        "description": "Price of the product in dollars",
                        "example": 25.99
                    },
                    "category": {
                        "type": "string",
                        "description": "ID of the category",
                        "example": "5f15d54cf3a046427a1c26e3"
                    },
                    "countInStock": {
                        "type": "integer",
                        "nullable": false,
                        "description": "Stock of the product",
                        "minimum": 0,
                        "maximum": 255,
                        "example": 40
                    },
                    "rating": {
                        "type": "integer",
                        "description": "Rating of the product, min 0 and max 5",
                        "minimum": 0,
                        "maximum": 5,
                        "example": 3
                    },
                    "numReviews": {
                        "type": "integer",
                        "description": "Number of views",
                        "example": 230
                    },
                    "isFeatured": {
                        "type": "boolean",
                        "description": "Slideshow of the product",
                        "example": false
                    },
                    "dateCreated": {
                        "type": "date",
                        "description": "Date of the register of the product",
                        "example": "2024-02-17T19:28:39.260+00:00"
                    }
                }
            },
            "NewOrder": {
                "type": "object",
                "properties": {
                    "orderItems": {
                        "type": "object",
                        "$ref": ""
                    },
                    "shippingAddress1": {
                        "type": "string",
                        "nullable": false,
                        "description": "",
                        "example": ""
                    },
                    "shippingAddress2": {
                        "type": "string",
                        "nullable": false,
                        "description": "",
                        "example": ""
                    },
                    "city": {
                        "type": "string",
                        "nullable": false,
                        "description": "",
                        "example": ""
                    },
                    "zip": {
                        "type": "string",
                        "nullable": false,
                        "description": "",
                        "example": ""
                    },
                    "country": {
                        "type": "string",
                        "nullable": false,
                        "description": "",
                        "example": ""
                    },
                    "phone": {
                        "type": "string",
                        "nullable": false,
                        "description": "",
                        "example": ""
                    },
                    "status": {
                        "type": "string",
                        "nullable": false,
                        "description": "",
                        "example": ""
                    },
                    "totalPrice": {
                        "type": "integer",
                        "description": "",
                        "example": ""
                    },
                    "user": {
                        "type": "string",
                        "nullable": false,
                        "description": "",
                        "example": ""
                    },
                    "dateOrdered": {
                        "type": "date",
                        "description": "",
                        "example": ""
                    }
                }
            },
            "NewUser": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The username",
                        "nullable": false,
                        "example": "John Doe"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the user",
                        "nullable": false,
                        "example": "JohnDoe@gmail.com"
                    },
                    "passwordHash": {
                        "type": "string",
                        "description": "A short password",
                        "nullable": false,
                        "example": "********"
                    },
                    "phone": {
                        "type": "string",
                        "description": "The cellphone number",
                        "nullable": false,
                        "example": "+573043625637"
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "User role",
                        "example": "true or false"
                    },
                    "street": {
                        "type": "string",
                        "description": "User address",
                        "example": "Kra 9 #13A"
                    },
                    "apartment": {
                        "type": "string",
                        "description": "Apartment number and hotel",
                        "example": "Room 32 hotel StarCity"
                    },
                    "zip": {
                        "type": "string",
                        "description": "The code of the town",
                        "example": "190531"
                    },
                    "city": {
                        "type": "string",
                        "description": "The city of residence",
                        "example": "New york"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country of residence",
                        "example": "Mexico"
                    }
                }
            },
            "Error": {
                "type": "object",
                "required": [
                    "code",
                    "message",
                    "success"
                ],
                "properties": {
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "message": {
                        "type": "string"
                    },
                    "success": {
                        "type": "boolean"
                    }
                }
            }
        }
    }
}